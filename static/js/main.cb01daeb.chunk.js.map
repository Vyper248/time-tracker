{"version":3,"sources":["functions.js","components/TimesDisplay.js","components/TimeList.js","components/Button.js","components/Time.js","App.js","reportWebVitals.js","index.js"],"names":["a0","t","formatSeconds","s","date","Date","actualDate","addSeconds","hours","differenceInHours","roundingMethod","totalTimeObj","intervalToDuration","start","end","minutes","seconds","getTotalTime","timeObjs","returnSeconds","forEach","timeObj","differenceInSeconds","endTime","startTime","StyledComp","styled","div","TimesDisplay","obj","timeFormat","totalTime","format","TimeList","times","length","datesObj","time","undefined","push","uniqueDates","Object","keys","map","Button","value","onClick","props","active","Time","heading","App","useState","setStartTime","setTimes","setTotalTime","timer","setTimer","intervalVal","setIntervalVal","useEffect","retrieveFromLocal","saveToLocal","object","localStorage","setItem","JSON","stringify","getItem","newTimes","parse","newStartTime","newTotal","startInterval","a","setInterval","stopTime","diff","clearValues","clearInterval","className","arrObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb01daeb.chunk.js","sourcesContent":["import { intervalToDuration, addSeconds, differenceInHours, differenceInSeconds } from 'date-fns';\n\n//add 0 to numbers less than 10\nconst a0 = (t) => t < 10 ? '0'+t : t;\n    \nexport const formatSeconds = (s) => {\n    if (typeof s !== 'number') return '00:00:00';\n    //calculate actual difference in hours, even if over 24\n    const date = new Date(0);\n    let actualDate = addSeconds(date, s);\n    let hours = differenceInHours(actualDate, date, {roundingMethod: 'floor'});\n\n    //get obj with minutes and seconds\n    const totalTimeObj = intervalToDuration({start: 0, end: s*1000});\n    return `${a0(hours)}:${a0(totalTimeObj.minutes)}:${a0(totalTimeObj.seconds)}`;\n}\n\nexport const getTotalTime = (timeObjs, returnSeconds=false) => {\n    let seconds = 0;\n    timeObjs.forEach(timeObj => {\n        seconds += differenceInSeconds(timeObj.endTime, timeObj.startTime);\n    });\n    if (returnSeconds) return seconds;\n    else return formatSeconds(seconds);\n}\n","import styled from 'styled-components';\nimport { format, differenceInSeconds } from 'date-fns';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    display: flex;\n    width: 330px;\n    margin: auto;\n\n    & > div:first-child {\n        display: grid;\n        grid-template-columns: 1fr 30px 1fr;\n        border: 1px solid gray;\n        border-radius: 5px 0px 0px 5px;\n        width: 200px;\n        margin: 5px auto;\n        text-align: center;\n        margin-right: 0px;\n    }\n\n    & > div:last-child {\n        border: 1px solid gray;\n        border-left: none;\n        border-radius: 0px 5px 5px 0px;\n        margin: 5px auto;\n        margin-left: 0px;\n        width: 100px;\n    }\n\n    & > div > div {\n        margin: 5px;\n        padding-top: 5px;\n        padding-bottom: 5px;\n    }\n\n`\n\nconst TimesDisplay = ({obj}) => {\n    let timeFormat = 'HH:mm:ss';\n    let seconds = differenceInSeconds(obj.endTime, obj.startTime);\n    let totalTime = formatSeconds(seconds);\n\n    return (\n        <StyledComp>\n            <div>\n                <div>{format(obj.startTime, timeFormat)}</div>\n                <div>To</div>\n                <div>{format(obj.endTime, timeFormat)}</div>\n            </div>\n            <div>\n                <div>{totalTime}</div>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default TimesDisplay;","import { format } from 'date-fns';\n\nimport { getTotalTime } from '../functions';\n\nimport TimesDisplay from './TimesDisplay';\n\nconst getDate = (time) => {\n    return format(time, 'EEEE do');\n}\n\nconst TimeList = ({times}) => {\n    if (times.length === 0) return null;\n\n    //sort objects by date\n    let datesObj = {};\n    times.forEach(timeObj => {\n        let date = getDate(timeObj.startTime);\n        if (datesObj[date] === undefined) datesObj[date] = [];\n        datesObj[date].push(timeObj);\n    });\n\n    let uniqueDates = Object.keys(datesObj);\n\n    return (\n        <div>\n        {\n            uniqueDates.map(date => {\n                let timeObjs = datesObj[date];\n                let totalTime = getTotalTime(timeObjs);\n                return  <div key={date}>\n                            <h3>{date}</h3>\n                            { timeObjs.map(obj => <TimesDisplay key={obj.startTime} obj={obj}/>) }\n                            <div>Daily Total: {totalTime}</div>\n                        </div>;\n            })\n        }\n        </div>\n    );\n}\n\nexport default TimeList;","import styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border: 1px solid gray;\n    border-radius: 5px;\n    display: inline-block;\n    padding: 5px;\n    margin: 5px;\n    width: 100px;\n    background-color: #EEE;\n\n    &:hover {\n        background-color: #CCC;\n        cursor: pointer;\n    }\n`\n\nconst Button = ({value, onClick}) => {\n    return (\n        <StyledComp onClick={onClick}>\n            {value}\n        </StyledComp>\n    );\n}\n\nexport default Button;","import styled from 'styled-components';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    border: 3px solid gray;\n    border-radius: 50%;\n    width: 150px;\n    height: 150px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 5px;\n    transition: 0.5s;\n    ${props => props.active ? 'border-color: green;' : ''}\n\n    & > div:first-child {\n        font-weight: bold;\n    }\n`\n\nconst Time = ({seconds, heading, active=false}) => {\n    return (\n        <StyledComp active={active}>\n            <div>{ heading }</div>\n            <div>{ formatSeconds(seconds) }</div>\n        </StyledComp>\n    );\n}\n\nexport default Time;","import { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { differenceInSeconds } from 'date-fns';\n\nimport TimeList from './components/TimeList';\nimport Button from './components/Button';\nimport Time from './components/Time';\nimport { getTotalTime } from './functions';\n\nfunction App() {\n\tconst [startTime, setStartTime] = useState(0);\n\tconst [times, setTimes] = useState([]);\n\tconst [totalTime, setTotalTime] = useState(0);\n\tconst [timer, setTimer] = useState(0);\n\tconst [intervalVal, setIntervalVal] = useState(null);\n\n\tuseEffect(() => {\n\t\tretrieveFromLocal();\n\t}, []);\n\n\tconst saveToLocal = (startTime, times, totalTime) => {\n\t\tlet object = {startTime, times, totalTime};\n\t\tlocalStorage.setItem('time-tracker-state', JSON.stringify(object));\n\t}\n\n\tconst retrieveFromLocal = () => {\n\t\tlet object = localStorage.getItem('time-tracker-state');\n\t\tif (object !== null) object = JSON.parse(object);\n\t\telse object = {startTime: 0, times: [], totalTime: 0};\n\n\t\t//convert time strings back into time objects\n\t\tlet newTimes = object.times.map(timeObj => {\n\t\t\treturn {\n\t\t\t\tstartTime: new Date(timeObj.startTime), \n\t\t\t\tendTime: new Date(timeObj.endTime)\n\t\t\t};\n\t\t});\n\n\t\t//convert time string to time object if not 0\n\t\tlet newStartTime = object.startTime === 0 ? 0 : new Date(object.startTime);\n\n\t\t//calculate total. Could just as easily restore total value from storage, \n\t\t//but this allows me to change the local storage values and still get a correct total\n\t\tlet newTotal = getTotalTime(newTimes, true);\n\n\t\t//restore state\n\t\tsetTimes(newTimes);\n\t\tsetStartTime(newStartTime);\n\t\tsetTotalTime(newTotal);\n\t\tstartInterval(newStartTime);\n\t}\n\n\tconst startInterval = (start) => {\n\t\tif (start === 0) return;\n\t\tlet a = setInterval(() => {\n\t\t\tlet stopTime = new Date();\n\t\t\tlet diff = differenceInSeconds(stopTime, start);\n\t\t\tsetTimer(diff);\n\t\t}, 100);\n\t\tsetIntervalVal(a);\n\t}\n\n\tconst onClickStart = () => {\n\t\tif (startTime !== 0) return;\n\n\t\tlet start = new Date();\n\t\tsetStartTime(start);\n\t\tsaveToLocal(start, times, totalTime);\n\n\t\tstartInterval(start);\n\t}\n\n\tconst clearValues = () => {\n\t\tsetStartTime(0);\n\t\tclearInterval(intervalVal);\n\t\tsetIntervalVal(null);\n\t\tsetTimer(0);\n\t}\n\n\tconst onClickStop = () => {\n\t\tif (startTime === 0) return;\n\n\t\tlet endTime = new Date();\n\t\tlet arrObj = {startTime, endTime};\n\t\tlet newTimes = [...times, arrObj];\n\t\tsetTimes(newTimes);\n\n\t\tlet newTotal = getTotalTime(newTimes, true);\n\t\tsetTotalTime(newTotal);\n\t\tclearValues();\n\t\tsaveToLocal(0, newTimes, newTotal);\n\t}\n\n\tconst onClickReset = () => {\n\t\tsetTimes([]);\n\t\tsetTotalTime(0);\n\t\tclearValues();\n\t\tsaveToLocal(0, [], 0);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t<h2>Time Tracker</h2>\n\t\t<div>\n\t\t\t<Time seconds={totalTime+timer} heading='Total Time'/>\n\t\t\t<Time seconds={timer} heading='Current Time' active={startTime !== 0}/>\n\t\t</div>\n\t\t<div>\n\t\t\t<Button value='Start' onClick={onClickStart}/>\n\t\t\t<Button value='Stop' onClick={onClickStop}/>\n\t\t\t<Button value='Reset' onClick={onClickReset}/>\n\t\t</div>\n\t\t<div>\n\t\t\t<TimeList times={times}/>\n\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}