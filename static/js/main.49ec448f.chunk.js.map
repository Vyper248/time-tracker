{"version":3,"sources":["components/TimesDisplay.js","components/Button.js","components/Time.js","App.js","reportWebVitals.js","index.js"],"names":["StyledComp","styled","div","TimesDisplay","obj","timeFormat","format","startTime","endTime","Button","value","onClick","props","active","Time","seconds","heading","a0","t","s","totalTimeObj","intervalToDuration","start","end","hours","minutes","formatSeconds","App","useState","setStartTime","times","setTimes","totalTime","setTotalTime","timer","setTimer","intervalVal","setIntervalVal","className","Date","a","setInterval","stopTime","diff","differenceInSeconds","arrObj","clearInterval","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49ec448f.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { format } from 'date-fns';\n\nconst StyledComp = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 50px 1fr;\n    border: 1px solid gray;\n    border-radius: 5px;\n    width: 220px;\n    margin: 5px auto;\n    text-align: center;\n\n    & > div {\n        margin: 5px;\n        padding: 5px;\n    }\n`\n\nconst TimesDisplay = ({obj}) => {\n    let timeFormat = 'HH:mm:ss'\n\n    return (\n        <StyledComp>\n            <div>{format(obj.startTime, timeFormat)}</div>\n            <div>To</div>\n\t\t\t<div>{format(obj.endTime, timeFormat)}</div>\n        </StyledComp>\n    );\n}\n\nexport default TimesDisplay;","import styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border: 1px solid gray;\n    border-radius: 5px;\n    display: inline-block;\n    padding: 5px;\n    margin: 5px;\n    width: 100px;\n    background-color: #EEE;\n\n    &:hover {\n        background-color: #CCC;\n        cursor: pointer;\n    }\n`\n\nconst Button = ({value, onClick}) => {\n    return (\n        <StyledComp onClick={onClick}>\n            {value}\n        </StyledComp>\n    );\n}\n\nexport default Button;","import styled from 'styled-components';\nimport { intervalToDuration } from 'date-fns';\n\nconst StyledComp = styled.div`\n    border: 3px solid gray;\n    border-radius: 50%;\n    width: 150px;\n    height: 150px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 5px;\n    transition: 0.5s;\n    ${props => props.active ? 'border-color: green;' : ''}\n\n    & > div:first-child {\n        font-weight: bold;\n    }\n`\n\nconst Time = ({seconds, heading, active=false}) => {\n    //add 0 to numbers less than 10\n    const a0 = (t) => t < 10 ? '0'+t : t;\n    \n    const formatSeconds = (s) => {\n        let totalTimeObj = intervalToDuration({start: 0, end: s*1000});\n        return `${a0(totalTimeObj.hours)}:${a0(totalTimeObj.minutes)}:${a0(totalTimeObj.seconds)}`;\n    }\n\n    return (\n        <StyledComp active={active}>\n            <div>{ heading }</div>\n            <div>{ formatSeconds(seconds) }</div>\n        </StyledComp>\n    );\n}\n\nexport default Time;","import { useState } from 'react';\nimport './App.css';\n\nimport { differenceInSeconds, format, intervalToDuration } from 'date-fns';\n\nimport TimesDisplay from './components/TimesDisplay';\nimport Button from './components/Button';\nimport Time from './components/Time';\n\nfunction App() {\n  const [startTime, setStartTime] = useState(0);\n  const [times, setTimes] = useState([]);\n  const [totalTime, setTotalTime] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [intervalVal, setIntervalVal] = useState(null);\n\n  const onClickStart = () => {\n\tif (startTime !== 0) return;\n\n    let start = new Date();\n    setStartTime(start);\n\n    let a = setInterval(() => {\n      let stopTime = new Date();\n      let diff = differenceInSeconds(stopTime, start);\n      setTimer(diff);\n    }, 1000);\n    setIntervalVal(a);\n  }\n\n  const onClickStop = () => {\n    if (startTime === 0) return;\n\n    let endTime = new Date();\n    let arrObj = {startTime, endTime};\n    setTimes([...times, arrObj]);\n\n    let diff = differenceInSeconds(endTime, startTime);\n    setTotalTime(totalTime + diff);\n    setStartTime(0);\n    clearInterval(intervalVal);\n    setIntervalVal(null);\n\tsetTimer(0);\n  }\n\n  const onClickReset = () => {\n\tsetTimes([]);\n\tsetTotalTime(0);\n\tsetTimer(0);\n\tclearInterval(intervalVal);\n    setIntervalVal(null);\n  }\n\n  //add 0 to numbers less than 10\n  const a0 = (t) => t < 10 ? '0'+t : t;\n  \n  const formatSeconds = (s) => {\n\tlet totalTimeObj = intervalToDuration({start: 0, end: s*1000});\n\treturn `${a0(totalTimeObj.hours)}:${a0(totalTimeObj.minutes)}:${a0(totalTimeObj.seconds)}`;\n  }\n\n  return (\n    <div className=\"App\">\n\t\t<h2>Time Tracker</h2>\n\t\t<div>\n\t\t\t<Time seconds={totalTime} heading='Total Time'/>\n\t\t\t<Time seconds={timer} heading='Current Time' active={startTime !== 0}/>\n\t\t</div>\n\t\t<div>\n\t\t\t<Button value='Start' onClick={onClickStart}/>\n\t\t\t<Button value='Stop' onClick={onClickStop}/>\n\t\t\t<Button value='Reset' onClick={onClickReset}/>\n\t\t</div>\n\t\t<div>\n\t\t\t{ times.map(obj => <TimesDisplay key={obj.startTime} obj={obj}/>) }\n\t\t</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}