{"version":3,"sources":["functions.js","components/TimesDisplay.js","components/TimeGroup.js","components/TimeList.js","components/Button.js","components/ConfirmButtonPopup.js","components/Time.js","components/GoalPopup.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["a0","t","formatSeconds","s","date","Date","actualDate","addSeconds","hours","differenceInHours","roundingMethod","totalTimeObj","intervalToDuration","start","end","minutes","seconds","getTotalTime","timeObjs","returnSeconds","forEach","timeObj","differenceInSeconds","endTime","startTime","getDate","time","format","sortByDate","times","datesObj","undefined","push","StyledComp","styled","div","TimesDisplay","obj","timeFormat","totalTime","TimeGroup","useState","open","setOpen","onClick","map","TimeList","length","uniqueDates","Object","keys","props","margin","width","Button","label","ConfirmButtonPopup","direction","confirmOpen","setConfirmOpen","userDirection","setDirection","ref","useRef","useEffect","onClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","checkDirection","rect","getBoundingClientRect","left","x","right","window","innerWidth","top","y","bottom","innerHeight","height","directions","getValidDirection","key","className","active","Time","heading","style","GoalPopup","goal","onChangeGoal","goalDaily","onClose","parts","split","parseInt","setHours","setMinutes","daily","setDaily","type","value","onChange","textAlign","checked","Header","goalProps","settingsOpen","setSettingsOpen","App","setStartTime","setTimes","setTotalTime","todaysTime","setTodaysTime","timer","setTimer","intervalVal","setIntervalVal","goalTime","setGoalTime","setGoalDaily","retrieveFromLocal","saveToLocal","object","localStorage","setItem","JSON","stringify","getItem","newTimes","parse","newStartTime","newTotal","startInterval","getTodaysTime","a","setInterval","stopTime","diff","title","todayTimes","clearValues","clearInterval","remainingTime","marginTop","arrObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b46d2bd7.chunk.js","sourcesContent":["import { intervalToDuration, addSeconds, differenceInHours, differenceInSeconds, format } from 'date-fns';\n\n//add 0 to numbers less than 10\nconst a0 = (t) => t < 10 ? '0'+t : t;\n    \nexport const formatSeconds = (s) => {\n    if (typeof s !== 'number') return '00:00:00';\n    //calculate actual difference in hours, even if over 24\n    const date = new Date(0);\n    let actualDate = addSeconds(date, s);\n    let hours = differenceInHours(actualDate, date, {roundingMethod: 'floor'});\n\n    //get obj with minutes and seconds\n    const totalTimeObj = intervalToDuration({start: 0, end: s*1000});\n    return `${a0(hours)}:${a0(totalTimeObj.minutes)}:${a0(totalTimeObj.seconds)}`;\n}\n\nexport const getTotalTime = (timeObjs, returnSeconds=false) => {\n    let seconds = 0;\n    timeObjs.forEach(timeObj => {\n        seconds += differenceInSeconds(timeObj.endTime, timeObj.startTime);\n    });\n    if (returnSeconds) return seconds;\n    else return formatSeconds(seconds);\n}\n\nexport const getDate = (time) => {\n    return format(time, 'EEEE do');\n}\n\nexport const sortByDate = (times) => {\n    let datesObj = {};\n\n    times.forEach(timeObj => {\n        let date = getDate(timeObj.startTime);\n        if (datesObj[date] === undefined) datesObj[date] = [];\n        datesObj[date].push(timeObj);\n    });\n\n    return datesObj;\n}","import styled from 'styled-components';\nimport { format, differenceInSeconds } from 'date-fns';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    display: flex;\n    width: 330px;\n    margin: auto;\n\n    & > div:first-child {\n        display: grid;\n        grid-template-columns: 1fr 30px 1fr;\n        border: 1px solid gray;\n        border-radius: 5px 0px 0px 5px;\n        width: 200px;\n        margin: 5px auto;\n        text-align: center;\n        margin-right: 0px;\n    }\n\n    & > div:last-child {\n        border: 1px solid gray;\n        border-left: none;\n        border-radius: 0px 5px 5px 0px;\n        margin: 5px auto;\n        margin-left: 0px;\n        width: 100px;\n    }\n\n    & > div > div {\n        margin: 5px;\n        padding-top: 5px;\n        padding-bottom: 5px;\n    }\n\n`\n\nconst TimesDisplay = ({obj}) => {\n    let timeFormat = 'HH:mm:ss';\n    let seconds = differenceInSeconds(obj.endTime, obj.startTime);\n    let totalTime = formatSeconds(seconds);\n\n    return (\n        <StyledComp>\n            <div>\n                <div>{format(obj.startTime, timeFormat)}</div>\n                <div>To</div>\n                <div>{format(obj.endTime, timeFormat)}</div>\n            </div>\n            <div>\n                <div>{totalTime}</div>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default TimesDisplay;","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { MdExpandMore, MdExpandLess } from 'react-icons/md';\n\nimport { getTotalTime } from '../functions';\n\nimport TimesDisplay from './TimesDisplay';\n\nconst StyledComp = styled.div`\n    & > div:first-child {\n        display: grid;\n        margin: auto;\n        grid-template-columns: 30px auto 30px;\n        width: 315px;\n\n        & > h3 {\n            margin-bottom: 10px;\n        }\n\n        & > svg {\n            float: right;\n            font-size: 1.7em;\n            position: relative;\n            top: 15px;\n            color: #666;\n\n            :hover {\n                cursor: pointer;\n                color: #333;\n            }\n        }\n    }\n`\n\nconst TimeGroup = ({date, timeObjs}) => {\n    const [open, setOpen] = useState(false);\n\n    let totalTime = getTotalTime(timeObjs);\n\n    const openTimes = () => setOpen(true);\n    const closeTimes = () => setOpen(false);\n\n    return (\n        <StyledComp>\n            <div>\n                <span></span>\n                <h3>{date}</h3>\n                { open ? <MdExpandLess onClick={closeTimes}/> : <MdExpandMore onClick={openTimes}/> }\n            </div>\n            { open ? timeObjs.map(obj => <TimesDisplay key={obj.startTime} obj={obj}/>) : null }\n            <div>Daily Total: {totalTime}</div>\n        </StyledComp>\n    );\n}\n\nexport default TimeGroup;","import { sortByDate } from '../functions';\n\nimport TimeGroup from './TimeGroup';\n\nconst TimeList = ({times}) => {\n    if (times.length === 0) return null;\n\n    //sort objects by date\n    let datesObj = sortByDate(times);\n    let uniqueDates = Object.keys(datesObj);\n\n    return (\n        <div>\n            { uniqueDates.map(date => <TimeGroup key={date} date={date} timeObjs={datesObj[date]}/>) }\n        </div>\n    );\n}\n\nexport default TimeList;","import styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border: 1px solid gray;\n    border-radius: 5px;\n    display: inline-block;\n    padding: 5px;\n    margin: ${props => props.margin};\n    width: ${props => props.width};\n    background-color: #EEE;\n    text-align: center;\n\n    &:hover {\n        background-color: #CCC;\n        cursor: pointer;\n    }\n`\n\nconst Button = ({label, onClick, width='100px', margin='5px'}) => {\n    return (\n        <StyledComp onClick={onClick} width={width} margin={margin}>\n            {label}\n        </StyledComp>\n    );\n}\n\nexport default Button;","import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    color: black;\n    width: ${props => props.width};\n    margin: ${props => props.margin};\n    display: inline-block;\n    position: relative;\n\n    & .label {\n        background-color: #EEE;\n        border: 1px solid gray;\n        padding: 5px;\n        border-radius: 5px;\n        transition: 0.3s;\n    }\n\n    & .label:hover {\n        cursor: pointer;\n        background-color: #CCC;\n    }\n\n    & .confirmation.visible {\n        opacity: 1;\n        pointer-events: all;\n        transition: 0.3s opacity;\n    }\n\n    & > .confirmation {\n        position: absolute;\n        width: 120px;\n        padding: 5px;\n        border: 1px solid gray;\n        border-radius: 5px;\n        transition: 0.3s opacity;\n        opacity: 0;\n        pointer-events: none;\n        color: black;\n        background-color: white;\n    }\n\n    & > .confirmation.top {\n        bottom: calc(100% + 5px);\n        left: 50%;\n        transform: translateX(-50%);\n    }\n\n    & > .confirmation.bottom {\n        top: calc(100% + 5px);\n        left: 50%;\n        transform: translateX(-50%);\n    }\n\n    & > .confirmation.left {\n        right: calc(100% + 5px);\n        top: 50%;\n        transform: translateY(-50%);\n    }\n\n    & > .confirmation.right {\n        left: calc(100% + 5px);\n        top: 50%;\n        transform: translateY(-50%);\n    }\n\n    & .confirmation::after {\n        content: '';\n        display: block;\n        width: 8px;\n        height: 8px;\n        background-color: white;\n        position: absolute;\n        border-left: 1px solid black;\n        border-bottom: 1px solid black;\n    }\n\n    & .confirmation.top::after {\n        bottom: -5px;\n        left: 50%;\n        transform:  translateX(-50%) rotate(-45deg);\n    }\n\n    & .confirmation.bottom::after {\n        top: -5px;\n        left: 50%;\n        transform:  translateX(-50%) rotate(135deg);\n    }\n\n    & .confirmation.left::after {\n        right: -5px;\n        top: 50%;\n        transform:  translateY(-50%) rotate(-135deg);\n    }\n\n    & .confirmation.right::after {\n        left: -5px;\n        top: 50%;\n        transform:  translateY(-50%) rotate(45deg);\n    }\n\n    & > .confirmation span {\n        margin-bottom: 5px;\n    }\n\n    & > .confirmation > div {\n        display: inline-block;\n        padding: 4px;\n        width: 50px;\n        color: black;\n        border-radius: 5px;\n        margin-top: 5px;\n        border: 1px solid gray;\n        background-color: #EEE;\n    }\n\n    & > .confirmation > div:first-of-type {\n        margin-right: 5px;\n    }\n\n    & .confirm:hover, & .cancel:hover {\n        cursor: pointer;\n        background-color: #CCC;\n    }\n`;\n\nconst ConfirmButtonPopup = ({label='', onClick=()=>{}, width='100px', margin='5px', direction='top'}) => {\n    const [confirmOpen, setConfirmOpen] = useState(false);\n    const [userDirection, setDirection] = useState(direction);\n\n    const ref = useRef(null);\n    useEffect(() => {\n        const onClickOutside = (e) => {\n            if (ref.current && !ref.current.contains(e.target)) {\n                if (confirmOpen) setConfirmOpen(false);\n            }\n        }\n\n        document.addEventListener('click', onClickOutside);\n        return () => {\n            document.removeEventListener('click', onClickOutside);\n        }\n\n    }, [ref, confirmOpen]);\n\n    const showConfirm = () => {\n        checkDirection();\n        setConfirmOpen(true);\n    }\n\n    const checkDirection = () => {\n        let rect = ref.current.getBoundingClientRect();\n        let left = rect.x > 130;\n        let right = window.innerWidth - (rect.x + rect.width) > 130;\n        let top = rect.y > 70;\n        let bottom = window.innerHeight - (rect.y + rect.height) > 70;\n        let directions = {top, bottom, left, right};\n\n        if (direction !== userDirection && directions[direction]) setDirection(direction);\n        if (!left && direction === 'left') setDirection(getValidDirection(directions));\n        if (!right && direction === 'right') setDirection(getValidDirection(directions));\n        if (!top && direction === 'top') setDirection(getValidDirection(directions));\n        if (!bottom && direction === 'bottom') setDirection(getValidDirection(directions));\n    }\n\n    const getValidDirection = (directions) => {\n        for (let key in directions) {\n            if (directions[key]) return key;\n        }\n        //if no direction is valid, just return what user wanted/default\n        return direction; \n    }\n\n    const hideConfirm = () => {\n        setConfirmOpen(false);\n    }\n\n    const onConfirm = () => {\n        setConfirmOpen(false);\n        onClick();\n    }\n\n    return (\n        <StyledComp width={width} margin={margin}>\n            <div ref={ref} className='label' onClick={showConfirm}>\n                <div>{label}</div>\n            </div>\n            <div className={`confirmation${confirmOpen ? ' visible' : ''} ${userDirection}`}>\n                <span>Are you sure?</span>\n                <div className='confirm' onClick={onConfirm}>Yes</div>\n                <div className='cancel' onClick={hideConfirm}>No</div>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default ConfirmButtonPopup;","import styled from 'styled-components';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    border: 3px solid gray;\n    border-radius: 50%;\n    width: 150px;\n    height: 150px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 5px;\n    transition: 0.5s;\n    ${props => props.active ? 'border-color: green;' : ''}\n\n    & > div:first-child {\n        font-weight: bold;\n    }\n`\n\nconst Time = ({seconds, heading, active=false, style}) => {\n    return (\n        <StyledComp active={active} style={style}>\n            <div>{ heading }</div>\n            <div>{ formatSeconds(seconds) }</div>\n        </StyledComp>\n    );\n}\n\nexport default Time;","import { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { formatSeconds } from '../functions';\nimport Button from './Button';\n\nconst StyledComp = styled.div`\n    position: absolute;\n    border: 1px solid #666;\n    width: 200px;\n    margin: auto;\n    top: calc(100% - 10px);\n    left: -87px;\n    background-color: white;\n    border-radius: 10px;\n    padding: 5px;\n\n    & > div:first-child {\n        position: absolute;\n        border-left: 1px solid #666;\n        border-top: 1px solid #666;\n        width: 12px;\n        height: 12px;\n        transform: rotate(45deg) translate(-50%, -50%);\n        top: 2px;\n        left: calc(50% - 6px);\n        background-color: white;\n    }\n\n    & input {\n        width: 100%;\n    }\n\n    & input[type='checkbox'] {\n        width: 15px;\n        height: 15px;\n        margin-left: 0px;\n    }\n\n    & td {\n        padding: 5px;\n    }\n\n    & td:first-of-type {\n        text-align: right;\n    }\n\n    @media screen and (max-width:520px) {\n        left: -160px;\n\n        & > div:first-child {\n            left: calc(100% - 32px);\n        }\n    }\n`\n\nconst GoalPopup = ({goal, onChangeGoal, goalDaily=false, onClose}) => {\n    let goalTime = formatSeconds(goal);\n    let parts = goalTime.split(':').map(time => parseInt(time));\n    const [hours, setHours] = useState(parts[0]);\n    const [minutes, setMinutes] = useState(parts[1]);\n    const [daily, setDaily] = useState(goalDaily);\n\n    const onChangeHours = (e) => {\n        setHours(e.target.value);\n    }\n\n    const onChangeMinutes = (e) => {\n        setMinutes(e.target.value);\n    }\n\n    const onChangeDaily = (e) => {\n        setDaily(e.target.checked);\n    }\n\n    const setNewGoal = () => {\n        let seconds = 0;\n        seconds += hours * 60 * 60;\n        seconds += minutes * 60;\n        onChangeGoal(seconds, daily);\n        onClose();\n    }\n\n    return (\n        <StyledComp>\n            <div></div>\n            <h4 style={{margin: 5}}>Set Goal</h4>\n            <table>\n                <tbody>\n                    <tr>\n                        <td>Hours</td>\n                        <td><input type='number' value={hours} onChange={onChangeHours}/></td>\n                    </tr>\n                    <tr>\n                        <td>Minutes</td>\n                        <td><input type='number' value={minutes} onChange={onChangeMinutes}/></td>\n                    </tr>\n                    <tr>\n                        <td>Daily</td>\n                        <td style={{textAlign: 'left'}}><input type='checkbox' checked={daily} onChange={onChangeDaily}/></td>\n                    </tr>\n                    <tr>\n                        <td><Button label='Save' onClick={setNewGoal} margin='0px' width='80px'/></td>\n                        <td><Button label='Cancel' onClick={onClose} margin='0px' width='80px'/></td>\n                    </tr>\n                </tbody>\n            </table>\n        </StyledComp>\n    );\n}\n\nexport default GoalPopup;","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { MdSettings } from 'react-icons/md';\n\nimport GoalPopup from './GoalPopup';\n\nconst StyledComp = styled.div`\n    display: grid;\n    grid-template-columns: 25px auto 25px;\n    width: 315px;\n    margin: auto;\n\n    & > div {\n        position: relative;\n    }\n\n    & > div > svg {\n        float: right;\n        font-size: 1.5em;\n        position: relative;\n        top: 22px;\n        color: #666;\n\n        :hover {\n            cursor: pointer;\n            color: #333;\n        }\n    }\n`\n\nconst Header = ({...goalProps}) => {\n    const [settingsOpen, setSettingsOpen] = useState(false);\n\n    const onClickSettings = () => {\n        setSettingsOpen(true);\n    }\n\n    const onCloseSettings = () => {\n        setSettingsOpen(false);\n    }\n\n    return (\n        <StyledComp>\n            <span></span>\n            <h2>Time Tracker</h2>\n            <div>\n                <MdSettings onClick={onClickSettings}/>\n                { settingsOpen ? <GoalPopup {...goalProps} onClose={onCloseSettings}/> : null }\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { differenceInSeconds } from 'date-fns';\nimport { getTotalTime, sortByDate, getDate } from './functions';\n\nimport TimeList from './components/TimeList';\nimport Button from './components/Button';\nimport ConfirmButtonPopup from './components/ConfirmButtonPopup';\nimport Time from './components/Time';\nimport Header from './components/Header';\n\nfunction App() {\n\tconst [startTime, setStartTime] = useState(0);\n\tconst [times, setTimes] = useState([]);\n\tconst [totalTime, setTotalTime] = useState(0);\n\tconst [todaysTime, setTodaysTime] = useState(0);\n\tconst [timer, setTimer] = useState(0);\n\tconst [intervalVal, setIntervalVal] = useState(null);\n\tconst [goalTime, setGoalTime] = useState(0);\n\tconst [goalDaily, setGoalDaily] = useState(false);\n\n\tuseEffect(() => {\n\t\tretrieveFromLocal();\n\t}, []);\n\n\tconst saveToLocal = (startTime, times, totalTime, goalTime, goalDaily) => {\n\t\tlet object = {startTime, times, totalTime, goalTime, goalDaily};\n\t\tlocalStorage.setItem('time-tracker-state', JSON.stringify(object));\n\t}\n\n\tconst retrieveFromLocal = () => {\n\t\tlet object = localStorage.getItem('time-tracker-state');\n\t\tif (object !== null) object = JSON.parse(object);\n\t\telse object = {startTime: 0, times: [], totalTime: 0, goalTime: 0, goalDaily: false};\n\n\t\t//convert time strings back into time objects\n\t\tlet newTimes = object.times.map(timeObj => {\n\t\t\treturn {\n\t\t\t\tstartTime: new Date(timeObj.startTime), \n\t\t\t\tendTime: new Date(timeObj.endTime)\n\t\t\t};\n\t\t});\n\n\t\t//convert time string to time object if not 0\n\t\tlet newStartTime = object.startTime === 0 ? 0 : new Date(object.startTime);\n\n\t\t//calculate total. Could just as easily restore total value from storage, \n\t\t//but this allows me to change the local storage values and still get a correct total\n\t\tlet newTotal = getTotalTime(newTimes, true);\n\n\t\t//restore state\n\t\tsetTimes(newTimes);\n\t\tsetStartTime(newStartTime);\n\t\tsetTotalTime(newTotal);\n\t\tstartInterval(newStartTime);\n\t\tgetTodaysTime(newTimes);\n\t\tsetGoalTime(object.goalTime);\n\t\tsetGoalDaily(object.goalDaily);\n\t}\n\n\tconst startInterval = (start) => {\n\t\tif (start === 0) return;\n\t\tlet a = setInterval(() => {\n\t\t\tlet stopTime = new Date();\n\t\t\tlet diff = differenceInSeconds(stopTime, start);\n\t\t\tsetTimer(diff);\n\t\t}, 100);\n\t\tsetIntervalVal(a);\n\t\twindow.document.title = 'Time Tracker - Active';\n\t}\n\n\tconst getTodaysTime = (times) => {\n\t\tlet datesObj = sortByDate(times);\n\t\tlet today = getDate(new Date());\n\t\tlet todayTimes = datesObj[today];\n\n\t\tif (todayTimes !== undefined) {\n\t\t\tlet time = getTotalTime(todayTimes, true);\n\t\t\tsetTodaysTime(time);\n\t\t}\n\t}\n\n\tconst onClickStart = () => {\n\t\tif (startTime !== 0) return;\n\n\t\tlet start = new Date();\n\t\tsetStartTime(start);\n\t\tsaveToLocal(start, times, totalTime, goalTime, goalDaily);\n\n\t\tstartInterval(start);\n\t}\n\n\tconst clearValues = () => {\n\t\tsetStartTime(0);\n\t\tclearInterval(intervalVal);\n\t\twindow.document.title = 'Time Tracker';\n\t\tsetIntervalVal(null);\n\t\tsetTimer(0);\n\t\tsetTodaysTime(0);\n\t}\n\n\tconst onClickStop = () => {\n\t\tif (startTime === 0) return;\n\n\t\tlet endTime = new Date();\n\t\tlet arrObj = {startTime, endTime};\n\t\tlet newTimes = [...times, arrObj];\n\t\tsetTimes(newTimes);\n\n\t\tlet newTotal = getTotalTime(newTimes, true);\n\t\tsetTotalTime(newTotal);\n\t\tclearValues();\n\t\tsaveToLocal(0, newTimes, newTotal, goalTime, goalDaily);\n\t\tgetTodaysTime(newTimes);\n\t}\n\n\tconst onClickReset = () => {\n\t\tsetTimes([]);\n\t\tsetTotalTime(0);\n\t\tclearValues();\n\t\tsaveToLocal(0, [], 0, goalTime, goalDaily);\n\t}\n\n\tconst onChangeGoal = (s, daily) => {\n\t\tsetGoalTime(s);\n\t\tsetGoalDaily(daily);\n\t\tsaveToLocal(startTime, times, totalTime, s, daily);\n\t}\n\n\tlet remainingTime = goalTime - totalTime - timer;\n\tif (goalDaily) remainingTime = goalTime - todaysTime - timer;\n\tif (remainingTime < 0) remainingTime = 0;\n\n\tlet marginTop = todaysTime === totalTime ? 0 : -20;\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t<Header goal={goalTime} onChangeGoal={onChangeGoal} goalDaily={goalDaily}/>\n\t\t<div>\n\t\t\t<Time seconds={totalTime+timer} heading='Total Time'/>\n\t\t\t{ todaysTime === totalTime ? null : <Time seconds={todaysTime+timer} heading=\"Today's Time\"/> }\n\t\t\t<Time seconds={timer} heading='Current Time' active={startTime !== 0} style={{marginTop}}/>\n\t\t</div>\n\t\t{ goalTime > 0 ? \n\t\t\t<div style={{marginTop}}>\n\t\t\t\t<Time seconds={goalTime} heading={goalDaily ? 'Daily Goal' : 'Goal'} active={remainingTime === 0}/>\n\t\t\t\t<Time seconds={remainingTime} heading='Remaining' active={remainingTime === 0}/>\n\t\t\t</div> \n\t\t\t: null }\n\t\t<div>\n\t\t\t<Button label='Start' onClick={onClickStart}/>\n\t\t\t<Button label='Stop' onClick={onClickStop}/>\n\t\t\t<ConfirmButtonPopup label='Reset' onClick={onClickReset} width='100px'/>\n\t\t</div>\n\t\t<div>\n\t\t\t<TimeList times={times}/>\n\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}