{"version":3,"sources":["functions.js","components/TimesDisplay.js","components/Button.js","components/Time.js","App.js","reportWebVitals.js","index.js"],"names":["a0","t","formatSeconds","s","totalTimeObj","intervalToDuration","start","end","hours","minutes","seconds","StyledComp","styled","div","TimesDisplay","obj","timeFormat","differenceInSeconds","endTime","startTime","totalTime","format","Button","value","onClick","props","active","Time","heading","App","useState","setStartTime","times","setTimes","setTotalTime","timer","setTimer","intervalVal","setIntervalVal","useEffect","retrieveFromLocal","saveToLocal","object","localStorage","setItem","JSON","stringify","getItem","newTimes","parse","map","timeObj","Date","newStartTime","startInterval","a","setInterval","stopTime","diff","clearValues","clearInterval","className","arrObj","newTotal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6859b73.chunk.js","sourcesContent":["import { intervalToDuration } from 'date-fns';\n\n//add 0 to numbers less than 10\nconst a0 = (t) => t < 10 ? '0'+t : t;\n    \nexport const formatSeconds = (s) => {\n    let totalTimeObj = intervalToDuration({start: 0, end: s*1000});\n    return `${a0(totalTimeObj.hours)}:${a0(totalTimeObj.minutes)}:${a0(totalTimeObj.seconds)}`;\n}","import styled from 'styled-components';\nimport { format, differenceInSeconds } from 'date-fns';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    display: flex;\n    width: 330px;\n    margin: auto;\n\n    & > div:first-child {\n        display: grid;\n        grid-template-columns: 1fr 50px 1fr;\n        border: 1px solid gray;\n        border-radius: 5px 0px 0px 5px;\n        width: 220px;\n        margin: 5px auto;\n        text-align: center;\n        margin-right: 0px;\n    }\n\n    & > div:last-child {\n        border: 1px solid gray;\n        border-left: none;\n        border-radius: 0px 5px 5px 0px;\n        margin: 5px auto;\n        margin-left: 0px;\n    }\n\n    & > div > div {\n        margin: 5px;\n        padding: 5px;\n    }\n\n`\n\nconst TimesDisplay = ({obj}) => {\n    let timeFormat = 'HH:mm:ss';\n    let seconds = differenceInSeconds(obj.endTime, obj.startTime);\n    let totalTime = formatSeconds(seconds);\n\n    return (\n        <StyledComp>\n            <div>\n                <div>{format(obj.startTime, timeFormat)}</div>\n                <div>To</div>\n                <div>{format(obj.endTime, timeFormat)}</div>\n            </div>\n            <div>\n                <div>{totalTime}</div>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default TimesDisplay;","import styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border: 1px solid gray;\n    border-radius: 5px;\n    display: inline-block;\n    padding: 5px;\n    margin: 5px;\n    width: 100px;\n    background-color: #EEE;\n\n    &:hover {\n        background-color: #CCC;\n        cursor: pointer;\n    }\n`\n\nconst Button = ({value, onClick}) => {\n    return (\n        <StyledComp onClick={onClick}>\n            {value}\n        </StyledComp>\n    );\n}\n\nexport default Button;","import styled from 'styled-components';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    border: 3px solid gray;\n    border-radius: 50%;\n    width: 150px;\n    height: 150px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 5px;\n    transition: 0.5s;\n    ${props => props.active ? 'border-color: green;' : ''}\n\n    & > div:first-child {\n        font-weight: bold;\n    }\n`\n\nconst Time = ({seconds, heading, active=false}) => {\n    return (\n        <StyledComp active={active}>\n            <div>{ heading }</div>\n            <div>{ formatSeconds(seconds) }</div>\n        </StyledComp>\n    );\n}\n\nexport default Time;","import { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { differenceInSeconds } from 'date-fns';\n\nimport TimesDisplay from './components/TimesDisplay';\nimport Button from './components/Button';\nimport Time from './components/Time';\n\nfunction App() {\n\tconst [startTime, setStartTime] = useState(0);\n\tconst [times, setTimes] = useState([]);\n\tconst [totalTime, setTotalTime] = useState(0);\n\tconst [timer, setTimer] = useState(0);\n\tconst [intervalVal, setIntervalVal] = useState(null);\n\n\tuseEffect(() => {\n\t\tretrieveFromLocal();\n\t}, []);\n\n\tconst saveToLocal = (startTime, times, totalTime) => {\n\t\tlet object = {startTime, times, totalTime};\n\t\tlocalStorage.setItem('time-tracker-state', JSON.stringify(object));\n\t}\n\n\tconst retrieveFromLocal = () => {\n\t\tlet object = localStorage.getItem('time-tracker-state');\n\t\tif (object !== null) object = JSON.parse(object);\n\t\telse object = {startTime: 0, times: [], totalTime: 0};\n\n\t\t//convert time strings back into time objects\n\t\tlet newTimes = object.times.map(timeObj => {\n\t\t\treturn {\n\t\t\t\tstartTime: new Date(timeObj.startTime), \n\t\t\t\tendTime: new Date(timeObj.endTime)\n\t\t\t};\n\t\t});\n\n\t\t//convert time string to time object if not 0\n\t\tlet newStartTime = object.startTime === 0 ? 0 : new Date(object.startTime);\n\n\t\t//restore state\n\t\tsetTimes(newTimes);\n\t\tsetStartTime(newStartTime);\n\t\tsetTotalTime(object.totalTime);\n\t\tstartInterval(newStartTime);\n\t}\n\n\tconst startInterval = (start) => {\n\t\tif (start === 0) return;\n\t\tlet a = setInterval(() => {\n\t\t\tlet stopTime = new Date();\n\t\t\tlet diff = differenceInSeconds(stopTime, start);\n\t\t\tsetTimer(diff);\n\t\t}, 100);\n\t\tsetIntervalVal(a);\n\t}\n\n\tconst onClickStart = () => {\n\t\tif (startTime !== 0) return;\n\n\t\tlet start = new Date();\n\t\tsetStartTime(start);\n\t\tsaveToLocal(start, times, totalTime);\n\n\t\tstartInterval(start);\n\t}\n\n\tconst clearValues = () => {\n\t\tsetStartTime(0);\n\t\tclearInterval(intervalVal);\n\t\tsetIntervalVal(null);\n\t\tsetTimer(0);\n\t}\n\n\tconst onClickStop = () => {\n\t\tif (startTime === 0) return;\n\n\t\tlet endTime = new Date();\n\t\tlet arrObj = {startTime, endTime};\n\t\tlet newTimes = [...times, arrObj];\n\t\tsetTimes(newTimes);\n\n\t\tlet diff = differenceInSeconds(endTime, startTime);\n\t\tlet newTotal = totalTime + diff;\n\t\tsetTotalTime(newTotal);\n\t\tclearValues();\n\t\tsaveToLocal(0, newTimes, newTotal);\n\t}\n\n\tconst onClickReset = () => {\n\t\tsetTimes([]);\n\t\tsetTotalTime(0);\n\t\tclearValues();\n\t\tsaveToLocal(0, [], 0);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t<h2>Time Tracker</h2>\n\t\t<div>\n\t\t\t<Time seconds={totalTime} heading='Total Time'/>\n\t\t\t<Time seconds={timer} heading='Current Time' active={startTime !== 0}/>\n\t\t</div>\n\t\t<div>\n\t\t\t<Button value='Start' onClick={onClickStart}/>\n\t\t\t<Button value='Stop' onClick={onClickStop}/>\n\t\t\t<Button value='Reset' onClick={onClickReset}/>\n\t\t</div>\n\t\t<div>\n\t\t\t{ times.map(obj => <TimesDisplay key={obj.startTime} obj={obj}/>) }\n\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}