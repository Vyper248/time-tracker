{"version":3,"sources":["functions.js","components/TimesDisplay.js","components/TimeGroup.js","components/TimeList.js","components/Button.js","components/Time.js","App.js","reportWebVitals.js","index.js"],"names":["a0","t","formatSeconds","s","date","Date","actualDate","addSeconds","hours","differenceInHours","roundingMethod","totalTimeObj","intervalToDuration","start","end","minutes","seconds","getTotalTime","timeObjs","returnSeconds","forEach","timeObj","differenceInSeconds","endTime","startTime","getDate","time","format","sortByDate","times","datesObj","undefined","push","StyledComp","styled","div","TimesDisplay","obj","timeFormat","totalTime","TimeGroup","useState","open","setOpen","onClick","map","TimeList","length","uniqueDates","Object","keys","Button","value","props","active","Time","heading","App","setStartTime","setTimes","setTotalTime","todaysTime","setTodaysTime","timer","setTimer","intervalVal","setIntervalVal","useEffect","retrieveFromLocal","saveToLocal","object","localStorage","setItem","JSON","stringify","getItem","newTimes","parse","newStartTime","newTotal","startInterval","getTodaysTime","a","setInterval","stopTime","diff","todayTimes","clearValues","clearInterval","className","arrObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f1edbbf.chunk.js","sourcesContent":["import { intervalToDuration, addSeconds, differenceInHours, differenceInSeconds, format } from 'date-fns';\n\n//add 0 to numbers less than 10\nconst a0 = (t) => t < 10 ? '0'+t : t;\n    \nexport const formatSeconds = (s) => {\n    if (typeof s !== 'number') return '00:00:00';\n    //calculate actual difference in hours, even if over 24\n    const date = new Date(0);\n    let actualDate = addSeconds(date, s);\n    let hours = differenceInHours(actualDate, date, {roundingMethod: 'floor'});\n\n    //get obj with minutes and seconds\n    const totalTimeObj = intervalToDuration({start: 0, end: s*1000});\n    return `${a0(hours)}:${a0(totalTimeObj.minutes)}:${a0(totalTimeObj.seconds)}`;\n}\n\nexport const getTotalTime = (timeObjs, returnSeconds=false) => {\n    let seconds = 0;\n    timeObjs.forEach(timeObj => {\n        seconds += differenceInSeconds(timeObj.endTime, timeObj.startTime);\n    });\n    if (returnSeconds) return seconds;\n    else return formatSeconds(seconds);\n}\n\nexport const getDate = (time) => {\n    return format(time, 'EEEE do');\n}\n\nexport const sortByDate = (times) => {\n    let datesObj = {};\n\n    times.forEach(timeObj => {\n        let date = getDate(timeObj.startTime);\n        if (datesObj[date] === undefined) datesObj[date] = [];\n        datesObj[date].push(timeObj);\n    });\n\n    return datesObj;\n}","import styled from 'styled-components';\nimport { format, differenceInSeconds } from 'date-fns';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    display: flex;\n    width: 330px;\n    margin: auto;\n\n    & > div:first-child {\n        display: grid;\n        grid-template-columns: 1fr 30px 1fr;\n        border: 1px solid gray;\n        border-radius: 5px 0px 0px 5px;\n        width: 200px;\n        margin: 5px auto;\n        text-align: center;\n        margin-right: 0px;\n    }\n\n    & > div:last-child {\n        border: 1px solid gray;\n        border-left: none;\n        border-radius: 0px 5px 5px 0px;\n        margin: 5px auto;\n        margin-left: 0px;\n        width: 100px;\n    }\n\n    & > div > div {\n        margin: 5px;\n        padding-top: 5px;\n        padding-bottom: 5px;\n    }\n\n`\n\nconst TimesDisplay = ({obj}) => {\n    let timeFormat = 'HH:mm:ss';\n    let seconds = differenceInSeconds(obj.endTime, obj.startTime);\n    let totalTime = formatSeconds(seconds);\n\n    return (\n        <StyledComp>\n            <div>\n                <div>{format(obj.startTime, timeFormat)}</div>\n                <div>To</div>\n                <div>{format(obj.endTime, timeFormat)}</div>\n            </div>\n            <div>\n                <div>{totalTime}</div>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default TimesDisplay;","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { MdExpandMore, MdExpandLess } from 'react-icons/md';\n\nimport { getTotalTime } from '../functions';\n\nimport TimesDisplay from './TimesDisplay';\n\nconst StyledComp = styled.div`\n    & > div:first-child {\n        display: grid;\n        margin: auto;\n        grid-template-columns: 30px auto 30px;\n        width: 315px;\n\n        & > h3 {\n            margin-bottom: 10px;\n        }\n\n        & > svg {\n            float: right;\n            font-size: 1.7em;\n            position: relative;\n            top: 15px;\n            color: #666;\n\n            :hover {\n                cursor: pointer;\n                color: #333;\n            }\n        }\n    }\n`\n\nconst TimeGroup = ({date, timeObjs}) => {\n    const [open, setOpen] = useState(false);\n\n    let totalTime = getTotalTime(timeObjs);\n\n    const openTimes = () => setOpen(true);\n    const closeTimes = () => setOpen(false);\n\n    return (\n        <StyledComp>\n            <div>\n                <span></span>\n                <h3>{date}</h3>\n                { open ? <MdExpandLess onClick={closeTimes}/> : <MdExpandMore onClick={openTimes}/> }\n            </div>\n            { open ? timeObjs.map(obj => <TimesDisplay key={obj.startTime} obj={obj}/>) : null }\n            <div>Daily Total: {totalTime}</div>\n        </StyledComp>\n    );\n}\n\nexport default TimeGroup;","import { sortByDate } from '../functions';\n\nimport TimeGroup from './TimeGroup';\n\nconst TimeList = ({times}) => {\n    if (times.length === 0) return null;\n\n    //sort objects by date\n    let datesObj = sortByDate(times);\n    let uniqueDates = Object.keys(datesObj);\n\n    return (\n        <div>\n            { uniqueDates.map(date => <TimeGroup key={date} date={date} timeObjs={datesObj[date]}/>) }\n        </div>\n    );\n}\n\nexport default TimeList;","import styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border: 1px solid gray;\n    border-radius: 5px;\n    display: inline-block;\n    padding: 5px;\n    margin: 5px;\n    width: 100px;\n    background-color: #EEE;\n\n    &:hover {\n        background-color: #CCC;\n        cursor: pointer;\n    }\n`\n\nconst Button = ({value, onClick}) => {\n    return (\n        <StyledComp onClick={onClick}>\n            {value}\n        </StyledComp>\n    );\n}\n\nexport default Button;","import styled from 'styled-components';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    border: 3px solid gray;\n    border-radius: 50%;\n    width: 150px;\n    height: 150px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 5px;\n    transition: 0.5s;\n    ${props => props.active ? 'border-color: green;' : ''}\n\n    & > div:first-child {\n        font-weight: bold;\n    }\n`\n\nconst Time = ({seconds, heading, active=false}) => {\n    return (\n        <StyledComp active={active}>\n            <div>{ heading }</div>\n            <div>{ formatSeconds(seconds) }</div>\n        </StyledComp>\n    );\n}\n\nexport default Time;","import { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { differenceInSeconds } from 'date-fns';\n\nimport TimeList from './components/TimeList';\nimport Button from './components/Button';\nimport Time from './components/Time';\nimport { getTotalTime, sortByDate, getDate } from './functions';\n\nfunction App() {\n\tconst [startTime, setStartTime] = useState(0);\n\tconst [times, setTimes] = useState([]);\n\tconst [totalTime, setTotalTime] = useState(0);\n\tconst [todaysTime, setTodaysTime] = useState(0);\n\tconst [timer, setTimer] = useState(0);\n\tconst [intervalVal, setIntervalVal] = useState(null);\n\n\tuseEffect(() => {\n\t\tretrieveFromLocal();\n\t}, []);\n\n\tconst saveToLocal = (startTime, times, totalTime) => {\n\t\tlet object = {startTime, times, totalTime};\n\t\tlocalStorage.setItem('time-tracker-state', JSON.stringify(object));\n\t}\n\n\tconst retrieveFromLocal = () => {\n\t\tlet object = localStorage.getItem('time-tracker-state');\n\t\tif (object !== null) object = JSON.parse(object);\n\t\telse object = {startTime: 0, times: [], totalTime: 0};\n\n\t\t//convert time strings back into time objects\n\t\tlet newTimes = object.times.map(timeObj => {\n\t\t\treturn {\n\t\t\t\tstartTime: new Date(timeObj.startTime), \n\t\t\t\tendTime: new Date(timeObj.endTime)\n\t\t\t};\n\t\t});\n\n\t\t//convert time string to time object if not 0\n\t\tlet newStartTime = object.startTime === 0 ? 0 : new Date(object.startTime);\n\n\t\t//calculate total. Could just as easily restore total value from storage, \n\t\t//but this allows me to change the local storage values and still get a correct total\n\t\tlet newTotal = getTotalTime(newTimes, true);\n\n\t\t//restore state\n\t\tsetTimes(newTimes);\n\t\tsetStartTime(newStartTime);\n\t\tsetTotalTime(newTotal);\n\t\tstartInterval(newStartTime);\n\t\tgetTodaysTime(newTimes);\n\t}\n\n\tconst startInterval = (start) => {\n\t\tif (start === 0) return;\n\t\tlet a = setInterval(() => {\n\t\t\tlet stopTime = new Date();\n\t\t\tlet diff = differenceInSeconds(stopTime, start);\n\t\t\tsetTimer(diff);\n\t\t}, 100);\n\t\tsetIntervalVal(a);\n\t}\n\n\tconst getTodaysTime = (times) => {\n\t\tlet datesObj = sortByDate(times);\n\t\tlet today = getDate(new Date());\n\t\tlet todayTimes = datesObj[today];\n\n\t\tif (todayTimes !== undefined) {\n\t\t\tlet time = getTotalTime(todayTimes, true);\n\t\t\tsetTodaysTime(time);\n\t\t}\n\t}\n\n\tconst onClickStart = () => {\n\t\tif (startTime !== 0) return;\n\n\t\tlet start = new Date();\n\t\tsetStartTime(start);\n\t\tsaveToLocal(start, times, totalTime);\n\n\t\tstartInterval(start);\n\t}\n\n\tconst clearValues = () => {\n\t\tsetStartTime(0);\n\t\tclearInterval(intervalVal);\n\t\tsetIntervalVal(null);\n\t\tsetTimer(0);\n\t}\n\n\tconst onClickStop = () => {\n\t\tif (startTime === 0) return;\n\n\t\tlet endTime = new Date();\n\t\tlet arrObj = {startTime, endTime};\n\t\tlet newTimes = [...times, arrObj];\n\t\tsetTimes(newTimes);\n\n\t\tlet newTotal = getTotalTime(newTimes, true);\n\t\tsetTotalTime(newTotal);\n\t\tclearValues();\n\t\tsaveToLocal(0, newTimes, newTotal);\n\t\tgetTodaysTime(newTimes);\n\t}\n\n\tconst onClickReset = () => {\n\t\tsetTimes([]);\n\t\tsetTotalTime(0);\n\t\tclearValues();\n\t\tsaveToLocal(0, [], 0);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t<h2>Time Tracker</h2>\n\t\t<div>\n\t\t\t<Time seconds={totalTime+timer} heading='Total Time'/>\n\t\t\t{ todaysTime === totalTime ? null : <Time seconds={todaysTime+timer} heading=\"Today's Time\"/> }\n\t\t\t<Time seconds={timer} heading='Current Time' active={startTime !== 0}/>\n\t\t</div>\n\t\t<div>\n\t\t\t<Button value='Start' onClick={onClickStart}/>\n\t\t\t<Button value='Stop' onClick={onClickStop}/>\n\t\t\t<Button value='Reset' onClick={onClickReset}/>\n\t\t</div>\n\t\t<div>\n\t\t\t<TimeList times={times}/>\n\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}