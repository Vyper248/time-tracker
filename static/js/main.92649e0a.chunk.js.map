{"version":3,"sources":["functions.js","components/TimesDisplay.js","components/TimeGroup.js","components/TimeList.js","components/Button.js","components/ConfirmButtonPopup.js","components/Time.js","components/GoalPopup.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["a0","t","formatSeconds","s","date","Date","actualDate","addSeconds","hours","differenceInHours","roundingMethod","totalTimeObj","intervalToDuration","start","end","minutes","seconds","getTotalTime","timeObjs","returnSeconds","forEach","timeObj","differenceInSeconds","endTime","startTime","getDate","time","format","sortByDate","times","datesObj","undefined","push","saveToLocal","totalTime","goalTime","goalDaily","object","localStorage","setItem","JSON","stringify","retrieveFromLocal","getItem","newTimes","parse","map","StyledComp","styled","div","TimesDisplay","obj","setTimes","useState","edit","setEdit","toLocaleTimeString","firstTime","setFirstTime","secondTime","setSecondTime","timeFormat","getNewDate","originalDate","split","newDate","setHours","setMinutes","setSeconds","className","type","value","onChange","e","newTime","target","step","onClick","firstDate","secondDate","index","indexOf","splice","updateLocalStorage","TimeGroup","rest","open","setOpen","TimeList","length","uniqueDates","Object","keys","props","margin","width","Button","label","ConfirmButtonPopup","direction","confirmOpen","setConfirmOpen","userDirection","setDirection","ref","useRef","useEffect","onClickOutside","current","contains","document","addEventListener","removeEventListener","checkDirection","rect","getBoundingClientRect","left","x","right","window","innerWidth","top","y","bottom","innerHeight","height","directions","getValidDirection","key","active","Time","heading","style","GoalPopup","goal","onChangeGoal","onClose","parts","parseInt","daily","setDaily","textAlign","checked","Header","goalProps","settingsOpen","setSettingsOpen","App","setStartTime","setTotalTime","todaysTime","setTodaysTime","timer","setTimer","intervalVal","setIntervalVal","setGoalTime","setGoalDaily","startInterval","updateTodaysTime","a","setInterval","stopTime","diff","title","todayTimes","clearValues","clearInterval","remainingTime","marginTop","arrObj","newTotal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.92649e0a.chunk.js","sourcesContent":["import { intervalToDuration, addSeconds, differenceInHours, differenceInSeconds, format } from 'date-fns';\n\n//add 0 to numbers less than 10\nconst a0 = (t) => t < 10 ? '0'+t : t;\n    \nexport const formatSeconds = (s) => {\n    if (typeof s !== 'number') return '00:00:00';\n    //calculate actual difference in hours, even if over 24\n    const date = new Date(0);\n    let actualDate = addSeconds(date, s);\n    let hours = differenceInHours(actualDate, date, {roundingMethod: 'floor'});\n\n    //get obj with minutes and seconds\n    const totalTimeObj = intervalToDuration({start: 0, end: s*1000});\n    return `${a0(hours)}:${a0(totalTimeObj.minutes)}:${a0(totalTimeObj.seconds)}`;\n}\n\nexport const getTotalTime = (timeObjs, returnSeconds=false) => {\n    let seconds = 0;\n    timeObjs.forEach(timeObj => {\n        seconds += differenceInSeconds(timeObj.endTime, timeObj.startTime);\n    });\n    if (returnSeconds) return seconds;\n    else return formatSeconds(seconds);\n}\n\nexport const getDate = (time) => {\n    return format(time, 'EEEE do');\n}\n\nexport const sortByDate = (times) => {\n    let datesObj = {};\n\n    times.forEach(timeObj => {\n        let date = getDate(timeObj.startTime);\n        if (datesObj[date] === undefined) datesObj[date] = [];\n        datesObj[date].push(timeObj);\n    });\n\n    return datesObj;\n}\n\nexport const saveToLocal = (startTime, times, totalTime, goalTime, goalDaily) => {\n    let object = {startTime, times, totalTime, goalTime, goalDaily};\n    localStorage.setItem('time-tracker-state', JSON.stringify(object));\n}\n\nexport const retrieveFromLocal = () => {\n    let object = localStorage.getItem('time-tracker-state');\n    if (object !== null) object = JSON.parse(object);\n    else object = {startTime: 0, times: [], totalTime: 0, goalTime: 0, goalDaily: false};\n\n    //convert time strings back into time objects\n    let newTimes = object.times.map(timeObj => {\n        return {\n            startTime: new Date(timeObj.startTime), \n            endTime: new Date(timeObj.endTime)\n        };\n    });\n\n    //convert time string to time object if not 0\n    let newStartTime = object.startTime === 0 ? 0 : new Date(object.startTime);\n\n    //calculate total. Could just as easily restore total value from storage, \n    //but this allows me to change the local storage values and still get a correct total\n    let newTotal = getTotalTime(newTimes, true);\n\n    return {\n        startTime: newStartTime,\n        times: newTimes,\n        totalTime: newTotal,\n        goalTime: object.goalTime,\n        goalDaily: object.goalDaily\n    }\n}","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { format, differenceInSeconds } from 'date-fns';\nimport { MdSettings } from 'react-icons/md';\n\nimport { formatSeconds, retrieveFromLocal, saveToLocal } from '../functions';\n\nconst StyledComp = styled.div`\n    display: flex;\n    width: 430px;\n    margin: auto;\n\n    & > div {\n        border: 1px solid gray;\n        border-left: none;\n        margin: 5px auto;\n        height: 40px;\n        padding-left: 5px;\n        padding-right: 5px;\n\n        & > div {\n            padding-top: 5px;\n            padding-bottom: 5px;\n            margin: 0px;\n            height: 100%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n    }\n\n    & > div.times {\n        border-left: 1px solid gray;\n        display: grid;\n        grid-template-columns: 1fr 30px 1fr;\n        border-radius: 5px 0px 0px 5px;\n        width: 300px;\n        text-align: center;\n        margin-right: 0px;\n\n        & input {\n            height: 30px;\n            width: 110px;\n        }\n    }\n\n    & > div.totalTime {\n        width: 120px;\n    }\n\n    & > div.edit {\n        border-left: none;\n        border-radius: 0px 5px 5px 0px;\n        margin-left: 0px;\n        width: 70px;\n\n        & > div > svg {\n            font-size: 1.3em;\n        }\n\n        &:hover {\n            background-color: lightgray;\n            cursor: pointer;\n        }\n    }\n`\n\nconst TimesDisplay = ({obj, times, setTimes}) => {\n    const [edit, setEdit] = useState(false);\n    const [firstTime, setFirstTime] = useState(obj.startTime.toLocaleTimeString());\n    const [secondTime, setSecondTime] = useState(obj.endTime.toLocaleTimeString());\n\n    let timeFormat = 'HH:mm:ss';\n    let seconds = differenceInSeconds(obj.endTime, obj.startTime);\n    let totalTime = formatSeconds(seconds);\n\n    const getNewDate = (time, originalDate) => {\n        let [hours, minutes, seconds] = time.split(':');\n        if (!seconds) seconds = 0;\n        if (!minutes) minutes = 0;\n        if (!hours) hours = 0;\n\n        const newDate = new Date(originalDate);\n        newDate.setHours(hours);\n        newDate.setMinutes(minutes);\n        newDate.setSeconds(seconds);\n\n        return newDate;\n    }\n\n    const updateLocalStorage = (newTimes) => {\n        let { startTime, totalTime, goalTime, goalDaily } = retrieveFromLocal();\n        saveToLocal(startTime, newTimes, totalTime, goalTime, goalDaily);\n    }\n\n    const onToggleEdit = () => {\n        setEdit(edit => !edit);\n        if (edit) {\n            const firstDate = getNewDate(firstTime, obj.startTime);\n            const secondDate = getNewDate(secondTime, obj.endTime);\n\n            let index = times.indexOf(obj);\n            let newTimes = [...times];\n            newTimes.splice(index, 1, {startTime: firstDate, endTime: secondDate});\n            setTimes(newTimes);\n            updateLocalStorage(newTimes);\n        }\n    }\n\n    const onChangeFirstTime = (e) => {\n        const newTime = e.target.value;\n        setFirstTime(newTime);\n    }\n\n    const onChangeSecondTime = (e) => {\n        const newTime = e.target.value;\n        setSecondTime(newTime);\n    }\n\n    return (\n        <StyledComp>\n            <div className='times'>\n                <div>\n                    { edit \n                        ? <div><input type='time' value={firstTime} onChange={onChangeFirstTime} step='1'/></div>\n                        : <div>{format(obj.startTime, timeFormat)}</div>\n                    }\n                </div>\n                <div>To</div>\n                <div>\n                    { edit \n                        ? <div><input type='time' value={secondTime} onChange={onChangeSecondTime} step='1'/></div>\n                        : <div>{format(obj.endTime, timeFormat)}</div>\n                    }\n                </div>\n            </div>\n            <div className='totalTime'>\n                <div>{totalTime}</div>\n            </div>\n            <div className='edit' onClick={onToggleEdit}>\n                <div>{edit ? 'Save' : <MdSettings/>}</div>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default TimesDisplay;","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { MdExpandMore, MdExpandLess } from 'react-icons/md';\n\nimport { getTotalTime } from '../functions';\n\nimport TimesDisplay from './TimesDisplay';\n\nconst StyledComp = styled.div`\n    & > div:first-child {\n        display: grid;\n        margin: auto;\n        grid-template-columns: 30px auto 30px;\n        width: 315px;\n\n        & > h3 {\n            margin-bottom: 10px;\n        }\n\n        & > svg {\n            float: right;\n            font-size: 1.7em;\n            position: relative;\n            top: 15px;\n            color: #666;\n\n            :hover {\n                cursor: pointer;\n                color: #333;\n            }\n        }\n    }\n`\n\nconst TimeGroup = ({date, timeObjs, ...rest}) => {\n    const [open, setOpen] = useState(false);\n\n    let totalTime = getTotalTime(timeObjs);\n\n    const openTimes = () => setOpen(true);\n    const closeTimes = () => setOpen(false);\n\n    return (\n        <StyledComp>\n            <div>\n                <span></span>\n                <h3>{date}</h3>\n                { open ? <MdExpandLess onClick={closeTimes}/> : <MdExpandMore onClick={openTimes}/> }\n            </div>\n            { open ? timeObjs.map(obj => <TimesDisplay key={obj.startTime} obj={obj} {...rest}/>) : null }\n            <div>Daily Total: {totalTime}</div>\n        </StyledComp>\n    );\n}\n\nexport default TimeGroup;","import { sortByDate } from '../functions';\n\nimport TimeGroup from './TimeGroup';\n\nconst TimeList = ({times, ...rest}) => {\n    if (times.length === 0) return null;\n\n    //sort objects by date\n    let datesObj = sortByDate(times);\n    let uniqueDates = Object.keys(datesObj);\n\n    return (\n        <div>\n            { uniqueDates.map(date => <TimeGroup key={date} date={date} timeObjs={datesObj[date]} times={times} {...rest}/>) }\n        </div>\n    );\n}\n\nexport default TimeList;","import styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border: 1px solid gray;\n    border-radius: 5px;\n    display: inline-block;\n    padding: 5px;\n    margin: ${props => props.margin};\n    width: ${props => props.width};\n    background-color: #EEE;\n    text-align: center;\n\n    &:hover {\n        background-color: #CCC;\n        cursor: pointer;\n    }\n`\n\nconst Button = ({label, onClick, width='100px', margin='5px'}) => {\n    return (\n        <StyledComp onClick={onClick} width={width} margin={margin}>\n            {label}\n        </StyledComp>\n    );\n}\n\nexport default Button;","import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    color: black;\n    width: ${props => props.width};\n    margin: ${props => props.margin};\n    display: inline-block;\n    position: relative;\n\n    & .label {\n        background-color: #EEE;\n        border: 1px solid gray;\n        padding: 5px;\n        border-radius: 5px;\n        transition: 0.3s;\n    }\n\n    & .label:hover {\n        cursor: pointer;\n        background-color: #CCC;\n    }\n\n    & .confirmation.visible {\n        opacity: 1;\n        pointer-events: all;\n        transition: 0.3s opacity;\n    }\n\n    & > .confirmation {\n        position: absolute;\n        width: 120px;\n        padding: 5px;\n        border: 1px solid gray;\n        border-radius: 5px;\n        transition: 0.3s opacity;\n        opacity: 0;\n        pointer-events: none;\n        color: black;\n        background-color: white;\n    }\n\n    & > .confirmation.top {\n        bottom: calc(100% + 5px);\n        left: 50%;\n        transform: translateX(-50%);\n    }\n\n    & > .confirmation.bottom {\n        top: calc(100% + 5px);\n        left: 50%;\n        transform: translateX(-50%);\n    }\n\n    & > .confirmation.left {\n        right: calc(100% + 5px);\n        top: 50%;\n        transform: translateY(-50%);\n    }\n\n    & > .confirmation.right {\n        left: calc(100% + 5px);\n        top: 50%;\n        transform: translateY(-50%);\n    }\n\n    & .confirmation::after {\n        content: '';\n        display: block;\n        width: 8px;\n        height: 8px;\n        background-color: white;\n        position: absolute;\n        border-left: 1px solid black;\n        border-bottom: 1px solid black;\n    }\n\n    & .confirmation.top::after {\n        bottom: -5px;\n        left: 50%;\n        transform:  translateX(-50%) rotate(-45deg);\n    }\n\n    & .confirmation.bottom::after {\n        top: -5px;\n        left: 50%;\n        transform:  translateX(-50%) rotate(135deg);\n    }\n\n    & .confirmation.left::after {\n        right: -5px;\n        top: 50%;\n        transform:  translateY(-50%) rotate(-135deg);\n    }\n\n    & .confirmation.right::after {\n        left: -5px;\n        top: 50%;\n        transform:  translateY(-50%) rotate(45deg);\n    }\n\n    & > .confirmation span {\n        margin-bottom: 5px;\n    }\n\n    & > .confirmation > div {\n        display: inline-block;\n        padding: 4px;\n        width: 50px;\n        color: black;\n        border-radius: 5px;\n        margin-top: 5px;\n        border: 1px solid gray;\n        background-color: #EEE;\n    }\n\n    & > .confirmation > div:first-of-type {\n        margin-right: 5px;\n    }\n\n    & .confirm:hover, & .cancel:hover {\n        cursor: pointer;\n        background-color: #CCC;\n    }\n`;\n\nconst ConfirmButtonPopup = ({label='', onClick=()=>{}, width='100px', margin='5px', direction='top'}) => {\n    const [confirmOpen, setConfirmOpen] = useState(false);\n    const [userDirection, setDirection] = useState(direction);\n\n    const ref = useRef(null);\n    useEffect(() => {\n        const onClickOutside = (e) => {\n            if (ref.current && !ref.current.contains(e.target)) {\n                if (confirmOpen) setConfirmOpen(false);\n            }\n        }\n\n        document.addEventListener('click', onClickOutside);\n        return () => {\n            document.removeEventListener('click', onClickOutside);\n        }\n\n    }, [ref, confirmOpen]);\n\n    const showConfirm = () => {\n        checkDirection();\n        setConfirmOpen(true);\n    }\n\n    const checkDirection = () => {\n        let rect = ref.current.getBoundingClientRect();\n        let left = rect.x > 130;\n        let right = window.innerWidth - (rect.x + rect.width) > 130;\n        let top = rect.y > 70;\n        let bottom = window.innerHeight - (rect.y + rect.height) > 70;\n        let directions = {top, bottom, left, right};\n\n        if (direction !== userDirection && directions[direction]) setDirection(direction);\n        if (!left && direction === 'left') setDirection(getValidDirection(directions));\n        if (!right && direction === 'right') setDirection(getValidDirection(directions));\n        if (!top && direction === 'top') setDirection(getValidDirection(directions));\n        if (!bottom && direction === 'bottom') setDirection(getValidDirection(directions));\n    }\n\n    const getValidDirection = (directions) => {\n        for (let key in directions) {\n            if (directions[key]) return key;\n        }\n        //if no direction is valid, just return what user wanted/default\n        return direction; \n    }\n\n    const hideConfirm = () => {\n        setConfirmOpen(false);\n    }\n\n    const onConfirm = () => {\n        setConfirmOpen(false);\n        onClick();\n    }\n\n    return (\n        <StyledComp width={width} margin={margin}>\n            <div ref={ref} className='label' onClick={showConfirm}>\n                <div>{label}</div>\n            </div>\n            <div className={`confirmation${confirmOpen ? ' visible' : ''} ${userDirection}`}>\n                <span>Are you sure?</span>\n                <div className='confirm' onClick={onConfirm}>Yes</div>\n                <div className='cancel' onClick={hideConfirm}>No</div>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default ConfirmButtonPopup;","import styled from 'styled-components';\n\nimport { formatSeconds } from '../functions';\n\nconst StyledComp = styled.div`\n    border: 3px solid gray;\n    border-radius: 50%;\n    width: 150px;\n    height: 150px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 5px;\n    transition: 0.5s;\n    ${props => props.active ? 'border-color: green;' : ''}\n\n    & > div:first-child {\n        font-weight: bold;\n    }\n`\n\nconst Time = ({seconds, heading, active=false, style}) => {\n    return (\n        <StyledComp active={active} style={style}>\n            <div>{ heading }</div>\n            <div>{ formatSeconds(seconds) }</div>\n        </StyledComp>\n    );\n}\n\nexport default Time;","import { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { formatSeconds } from '../functions';\nimport Button from './Button';\n\nconst StyledComp = styled.div`\n    position: absolute;\n    border: 1px solid #666;\n    width: 200px;\n    margin: auto;\n    top: calc(100% - 10px);\n    left: -87px;\n    background-color: white;\n    border-radius: 10px;\n    padding: 5px;\n\n    & > div:first-child {\n        position: absolute;\n        border-left: 1px solid #666;\n        border-top: 1px solid #666;\n        width: 12px;\n        height: 12px;\n        transform: rotate(45deg) translate(-50%, -50%);\n        top: 2px;\n        left: calc(50% - 6px);\n        background-color: white;\n    }\n\n    & input {\n        width: 100%;\n    }\n\n    & input[type='checkbox'] {\n        width: 15px;\n        height: 15px;\n        margin-left: 0px;\n    }\n\n    & td {\n        padding: 5px;\n    }\n\n    & td:first-of-type {\n        text-align: right;\n    }\n\n    @media screen and (max-width:520px) {\n        left: -160px;\n\n        & > div:first-child {\n            left: calc(100% - 32px);\n        }\n    }\n`\n\nconst GoalPopup = ({goal, onChangeGoal, goalDaily=false, onClose}) => {\n    let goalTime = formatSeconds(goal);\n    let parts = goalTime.split(':').map(time => parseInt(time));\n    const [hours, setHours] = useState(parts[0]);\n    const [minutes, setMinutes] = useState(parts[1]);\n    const [daily, setDaily] = useState(goalDaily);\n\n    const onChangeHours = (e) => {\n        setHours(e.target.value);\n    }\n\n    const onChangeMinutes = (e) => {\n        setMinutes(e.target.value);\n    }\n\n    const onChangeDaily = (e) => {\n        setDaily(e.target.checked);\n    }\n\n    const setNewGoal = () => {\n        let seconds = 0;\n        seconds += hours * 60 * 60;\n        seconds += minutes * 60;\n        onChangeGoal(seconds, daily);\n        onClose();\n    }\n\n    return (\n        <StyledComp>\n            <div></div>\n            <h4 style={{margin: 5}}>Set Goal</h4>\n            <table>\n                <tbody>\n                    <tr>\n                        <td>Hours</td>\n                        <td><input type='number' value={hours} onChange={onChangeHours}/></td>\n                    </tr>\n                    <tr>\n                        <td>Minutes</td>\n                        <td><input type='number' value={minutes} onChange={onChangeMinutes}/></td>\n                    </tr>\n                    <tr>\n                        <td>Daily</td>\n                        <td style={{textAlign: 'left'}}><input type='checkbox' checked={daily} onChange={onChangeDaily}/></td>\n                    </tr>\n                    <tr>\n                        <td><Button label='Save' onClick={setNewGoal} margin='0px' width='80px'/></td>\n                        <td><Button label='Cancel' onClick={onClose} margin='0px' width='80px'/></td>\n                    </tr>\n                </tbody>\n            </table>\n        </StyledComp>\n    );\n}\n\nexport default GoalPopup;","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { MdSettings } from 'react-icons/md';\n\nimport GoalPopup from './GoalPopup';\n\nconst StyledComp = styled.div`\n    display: grid;\n    grid-template-columns: 25px auto 25px;\n    width: 315px;\n    margin: auto;\n\n    & > div {\n        position: relative;\n    }\n\n    & > div > svg {\n        float: right;\n        font-size: 1.5em;\n        position: relative;\n        top: 22px;\n        color: #666;\n\n        :hover {\n            cursor: pointer;\n            color: #333;\n        }\n    }\n`\n\nconst Header = ({...goalProps}) => {\n    const [settingsOpen, setSettingsOpen] = useState(false);\n\n    const onClickSettings = () => {\n        setSettingsOpen(true);\n    }\n\n    const onCloseSettings = () => {\n        setSettingsOpen(false);\n    }\n\n    return (\n        <StyledComp>\n            <span></span>\n            <h2>Time Tracker</h2>\n            <div>\n                <MdSettings onClick={onClickSettings}/>\n                { settingsOpen ? <GoalPopup {...goalProps} onClose={onCloseSettings}/> : null }\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { differenceInSeconds } from 'date-fns';\nimport { getTotalTime, sortByDate, getDate, retrieveFromLocal, saveToLocal } from './functions';\n\nimport TimeList from './components/TimeList';\nimport Button from './components/Button';\nimport ConfirmButtonPopup from './components/ConfirmButtonPopup';\nimport Time from './components/Time';\nimport Header from './components/Header';\n\nfunction App() {\n\tconst [startTime, setStartTime] = useState(0);\n\tconst [times, setTimes] = useState([]);\n\tconst [totalTime, setTotalTime] = useState(0);\n\tconst [todaysTime, setTodaysTime] = useState(0);\n\tconst [timer, setTimer] = useState(0);\n\tconst [intervalVal, setIntervalVal] = useState(null);\n\tconst [goalTime, setGoalTime] = useState(0);\n\tconst [goalDaily, setGoalDaily] = useState(false);\n\n\tuseEffect(() => {\n\t\tlet { startTime, times, totalTime, goalTime, goalDaily } = retrieveFromLocal();\n\t\tsetStartTime(startTime);\n\t\tsetTimes(times);\n\t\tsetTotalTime(totalTime);\n\t\tsetGoalTime(goalTime);\n\t\tsetGoalDaily(goalDaily);\n\t\tstartInterval(startTime);\n\t\tupdateTodaysTime(times);\n\t}, []);\n\n\t//if a time has been edited, then adjust the total time\n\tuseEffect(() => {\n\t\tlet totalTime = getTotalTime(times, true);\n\t\tsetTotalTime(totalTime);\n\t\tupdateTodaysTime(times);\n\t}, [times]);\n\n\tconst startInterval = (start) => {\n\t\tif (start === 0) return;\n\t\tlet a = setInterval(() => {\n\t\t\tlet stopTime = new Date();\n\t\t\tlet diff = differenceInSeconds(stopTime, start);\n\t\t\tsetTimer(diff);\n\t\t}, 100);\n\t\tsetIntervalVal(a);\n\t\twindow.document.title = 'Time Tracker - Active';\n\t}\n\n\tconst updateTodaysTime = (times) => {\n\t\tlet datesObj = sortByDate(times);\n\t\tlet today = getDate(new Date());\n\t\tlet todayTimes = datesObj[today];\n\n\t\tif (todayTimes !== undefined) {\n\t\t\tlet time = getTotalTime(todayTimes, true);\n\t\t\tsetTodaysTime(time);\n\t\t}\n\t}\n\n\tconst onClickStart = () => {\n\t\tif (startTime !== 0) return;\n\n\t\tlet start = new Date();\n\t\tsetStartTime(start);\n\t\tsaveToLocal(start, times, totalTime, goalTime, goalDaily);\n\n\t\tstartInterval(start);\n\t}\n\n\tconst clearValues = () => {\n\t\tsetStartTime(0);\n\t\tclearInterval(intervalVal);\n\t\twindow.document.title = 'Time Tracker';\n\t\tsetIntervalVal(null);\n\t\tsetTimer(0);\n\t}\n\n\tconst onClickStop = () => {\n\t\tif (startTime === 0) return;\n\n\t\tlet endTime = new Date();\n\t\tlet arrObj = {startTime, endTime};\n\t\tlet newTimes = [...times, arrObj];\n\t\tsetTimes(newTimes);\n\n\t\tlet newTotal = getTotalTime(newTimes, true);\n\t\tsetTotalTime(newTotal);\n\t\tclearValues();\n\t\tsaveToLocal(0, newTimes, 0, goalTime, goalDaily);\n\t\tupdateTodaysTime(newTimes);\n\t}\n\n\tconst onClickReset = () => {\n\t\tsetTimes([]);\n\t\tsetTotalTime(0);\n\t\tclearValues();\n\t\tsetTodaysTime(0);\n\t\tsaveToLocal(0, [], 0, goalTime, goalDaily);\n\t}\n\n\tconst onChangeGoal = (s, daily) => {\n\t\tsetGoalTime(s);\n\t\tsetGoalDaily(daily);\n\t\tsaveToLocal(startTime, times, totalTime, s, daily);\n\t}\n\n\tlet remainingTime = goalTime - totalTime - timer;\n\tif (goalDaily) remainingTime = goalTime - todaysTime - timer;\n\tif (remainingTime < 0) remainingTime = 0;\n\n\tlet marginTop = todaysTime === totalTime ? 0 : -20;\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t<Header goal={goalTime} onChangeGoal={onChangeGoal} goalDaily={goalDaily}/>\n\t\t<div>\n\t\t\t<Time seconds={totalTime+timer} heading='Total Time'/>\n\t\t\t{ todaysTime === totalTime ? null : <Time seconds={todaysTime+timer} heading=\"Today's Time\"/> }\n\t\t\t<Time seconds={timer} heading='Current Time' active={startTime !== 0} style={{marginTop}}/>\n\t\t</div>\n\t\t{ goalTime > 0 ? \n\t\t\t<div style={{marginTop}}>\n\t\t\t\t<Time seconds={goalTime} heading={goalDaily ? 'Daily Goal' : 'Goal'} active={remainingTime === 0}/>\n\t\t\t\t<Time seconds={remainingTime} heading='Remaining' active={remainingTime === 0}/>\n\t\t\t</div> \n\t\t\t: null }\n\t\t<div>\n\t\t\t<Button label='Start' onClick={onClickStart}/>\n\t\t\t<Button label='Stop' onClick={onClickStop}/>\n\t\t\t<ConfirmButtonPopup label='Reset' onClick={onClickReset} width='100px'/>\n\t\t</div>\n\t\t<div>\n\t\t\t<TimeList times={times} setTimes={setTimes}/>\n\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}